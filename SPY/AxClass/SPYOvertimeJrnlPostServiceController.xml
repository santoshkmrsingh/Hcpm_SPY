<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SPYOvertimeJrnlPostServiceController</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SPYOvertimeJrnlPostServiceController extends SysOperationServiceController
{
    FormRun                         overtimeJournalEdit;
    SPYOvertimeJournalPostContract  overtimeJournalContract;
    SPYOvertimeJournalCode          overtimeJournalCode;
    container                                   testNumCon;
    #define.CurrentVersion(1)
    #localmacro.VersionList
        testNumCon
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public IDialogable dialog()
    {
        if (!overtimeJournalEdit)
        {
            overtimeJournalEdit = classfactory.formRunClass(SPYOvertimeJrnlPostServiceController::newClientArgs(formStr(SPYovertimeJournalPostEdit), this));
            overtimeJournalEdit.init();
        }
    
        return overtimeJournalEdit as IDialogable;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogMake</Name>
				<Source><![CDATA[
    protected IDialogable dialogMake()
    {
        IDialogable dlg = this.dialog();
    
        if (this.canGoBatch())
           this.batchInfo().dialog(dlg);
    
        return dlg;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    protected void dialogPostRun()
    {
        //super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupDialog</Name>
				<Source><![CDATA[
    protected void  cleanupDialog()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogRun</Name>
				<Source><![CDATA[
    protected SysOperationStartResult dialogRun()
    {
        SysOperationStartResult result;
        CompanyId               companyId = curext();

        result = super();

        if (result == SysOperationStartResult::Canceled)
        {
            this.cleanupDialog();
        }

        if(companyId != curext())
        {
            appl.setDefaultCompany(companyId, false);
        }
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOvertimeJournalPostContract</Name>
				<Source><![CDATA[
    public SPYOvertimeJournalPostContract getOvertimeJournalPostContract()
    {
        return overtimeJournalContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOvertimeJournalCode</Name>
				<Source><![CDATA[
    SPYOvertimeJournalCode parmOvertimeJournalCode(SPYBenefitJournalCode _overtimeJournalCode = overtimeJournalCode)
    {
        overtimeJournalCode = _overtimeJournalCode;
    
        return overtimeJournalCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmServiceContract</Name>
				<Source><![CDATA[
    public SPYOvertimeJournalPostContract parmServiceContract(SPYOvertimeJournalPostContract _overtimeJournalContract = overtimeJournalContract)
    {
        overtimeJournalContract = _overtimeJournalContract;
        return overtimeJournalContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static SPYOvertimeJrnlPostServiceController construct(IdentifierName _className  = '',
                                                         IdentifierName _methodName = '',
                                                         SysOperationExecutionMode _executionMode = SysOperationExecutionMode::Synchronous)
    {
        return new SPYOvertimeJrnlPostServiceController(_className,_methodName,_executionMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        SPYOvertimeJrnlPostServiceController    overtimeJrnlPostServiceController;
        str                                     className, methodName;
        SysOperationExecutionMode               mode;
        SPYOvertimeJournalTable                 overtimeJournalTable;
    
        [className, methodName, mode] = SysOperationServiceController::parseServiceInfo(args);
        mode = SysOperationExecutionMode::Synchronous; ///
        overtimeJrnlPostServiceController = SPYOvertimeJrnlPostServiceController::construct(className, methodName, mode);
    
        if(args.record() is SPYOvertimeJournalTable)
            overtimeJournalTable = args.record() as SPYOvertimeJournalTable;
        overtimeJrnlPostServiceController.parmOvertimeJournalCode(overtimeJournalTable.OvertimeJournalCode);
    
        if(overtimeJrnlPostServiceController.prompt())
            overtimeJrnlPostServiceController.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newClientArgs</Name>
				<Source><![CDATA[
    client static Args  newClientArgs(str _formName, SPYOvertimeJrnlPostServiceController _overtimeJrnlPostServiceController)
    {
        Args  args = new  Args();
        args.name(_formName);
        args.caller(_overtimeJrnlPostServiceController);
        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name = "packedState"></param>
    /// <returns></returns>
    public boolean unpack(container packedState)
    {
        container   packedSuper;
        boolean     ret;
        int         version;

        version = SysOperationHelper::getVersion(packedState);

        switch (version)
        {
            case #CurrentVersion:
                [version, #VersionList, packedSuper] = packedState;
                ret = super(packedSuper);
                break;

            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>