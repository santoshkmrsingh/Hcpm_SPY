<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SPYUploadWorkerPayElement</Name>
	<SourceCode>
		<Declaration><![CDATA[
// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
class SPYUploadWorkerPayElement extends RunBaseBatch
{
    // Packed variables
    FileName       fileName;

    // Dialog fields
    DialogField         dlgFileName;

    #define.CurrentVersion(1)
    #define.Version1(1)
    #localmacro.CurrentList
        fileName
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the class is shown in the list of <c>Journal</c> types.
    /// </summary>
    /// <returns>
    ///    true if the class is shown in the list of <c>Journal</c> types; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    A class that can be used in a batch journal is a class where the same parameters can be used
    ///    repeatedly. The dialog box can be shown and the parameters can be changed, but parameters of some
    ///    classes might build on data that is only valid for a short time. Running a class two times with the
    ///    same parameters is not always possible. If the <c>RunBaseBatch.canGoBatch</c> method is false, this
    ///    method will not have any effect.
    /// </remarks>
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog box can be either built by using the <c>Dialog</c> class or by using a class that is
    ///    created in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase       dialog = super();
        #resAppl
    
        dialog.addImage(#ImageFolder);
        dialog.addInfoImage();
        dlgFileName = dialog.addFieldValue(extendedTypeStr(FileName),fileName);
    
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    public void dialogPostRun(DialogRunbase dialog)
    {
        super(dialog);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        fileName   = dlgFileName.value();
    
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        if (! this.validate())
            throw error("");
    
        try
        {
            ttsbegin;
    
            this.upload();
    
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);
    ;
        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;
            default:
                return false;
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>upload</Name>
				<Source><![CDATA[
    private void upload()
    {
        //TODO UPGRADE
        /*
        SysExcelApplication         application;
        SysExcelWorkbooks           workbooks;
        SysExcelWorkbook            workbook;
        SysExcelWorksheets          worksheets;
        SysExcelWorksheet           worksheet;
        SysExcelCells               cells;
        int                         row = 1;
        SPYWorkerPositionPayroll    workerPositionPayroll;
        SPYWorkerPositionBenefit    workerPositionBenefit;
        SPYPayrollPeriod            payrollPeriod;
        COMVariantType              type;
        HcmWorker                   worker;
        SPYPayElementTable          payElementTable;
        LegalEntityRecId            legalEntity;
        HcmPosition                 position;
        CurrencyCode                currency;
        TransDate                   validFrom,validTo;
        TransDate                   fromDate = dateNull(),toDate = dateMax();
        #AviFiles
        SysOperationProgress        progressBar = new SysOperationProgress();
        int                         progressCount,totalCount;
        RecId                       createdRec;
    
        application = SysExcelApplication::construct();
        workbooks = application.workbooks();
        try
        {
            workbooks.open(filename);
        }
        catch (Exception::Error)
        {
            throw error("@SYS19358");
        }
        workbook = workbooks.item(1);
        worksheets = workbook.worksheets();
        worksheet = worksheets.itemFromNum(1);
        cells = worksheet.cells();
    
        do
        {
            row++;
            totalCount++;
            type = cells.item(row+1, 1).value().variantType();
        }
        while (type != COMVariantType::VT_EMPTY);
        progressBar.setCaption("@SPY1114");
        progressBar.setAnimation(#AviUpdate);
        progressBar.setTotal(totalCount);
        progressCount = 1;
        row = 1;
        ttsBegin;
        do
        {
            row++;
            progressBar.setText(strfmt("@SPY1115", progressCount,totalCount));
            progressBar.setCount(progressCount, 1);
            worker = HcmWorker::findByPersonnelNumber(cells.item(row, 1).value().bStr());
            if(worker)
            {
                legalEntity         = CompanyInfo::current(cells.item(row, 2).value().bStr());
                if(cells.item(row, 3).value().bStr())
                    position        = HcmPosition::findByPosition(cells.item(row, 3).value().bStr());
                payElementTable     = SPYPayElementTable::findByCode(cells.item(row, 4).value().bStr());
                payrollPeriod       = SPYPayrollPeriod::findByCode(cells.item(row, 5).value().bStr());
                currency            = cells.item(row, 6).value().bStr();
                validFrom           = cells.item(row, 7).value().date();
                if(cells.item(row, 8).value().date())
                    validTo         = cells.item(row, 8).value().date();
                else
                    validTo         = dateMax();
                if(payElementTable.PayElementType == SPYPayElementType::Payroll)
                {
                    while select firstonly forUpdate validTimeState(fromDate,toDate) workerPositionPayroll
                        where workerPositionPayroll.Worker == worker.RecId &&
                              workerPositionPayroll.LegalEntity == CompanyInfo::current() &&
                              workerPositionPayroll.Position == position.RecId &&
                              workerPositionPayroll.PayrollPeriod == payrollPeriod.RecId &&
                              workerPositionPayroll.Payroll == payElementTable.RecId &&
                              workerPositionPayroll.ValidFrom >= validFrom
                    {
                        workerPositionPayroll.delete();
                    }
                    workerPositionPayroll.clear();
                    workerPositionPayroll.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);
                    workerPositionPayroll.Worker        = worker.RecId;
                    workerPositionPayroll.LegalEntity   = CompanyInfo::current();
                    workerPositionPayroll.Position      = position.RecId;
                    workerPositionPayroll.PayrollPeriod = payrollPeriod.RecId;
                    workerPositionPayroll.Payroll       = payElementTable.RecId;
                    workerPositionPayroll.ValidFrom     = validFrom;
                    workerPositionPayroll.ValidTo       = dateMax();
                    workerPositionPayroll.Monthly       = cells.item(row, 9).value().double();
                    workerPositionPayroll.Currency      = currency;
                    workerPositionPayroll.insert();
                    createdRec = workerPositionPayroll.RecId;
                    if(validTo != dateMax())
                    {
                        select forUpdate validTimeState(fromDate,toDate) workerPositionPayroll
                            where workerPositionPayroll.RecId == createdRec;
                        if(workerPositionPayroll)
                        {
                            workerPositionPayroll.ValidTo = validTo;
                            workerPositionPayroll.update();
                        }
                    }
                }
                else if(payElementTable.PayElementType == SPYPayElementType::Benefit)
                {
                    while select firstonly forUpdate validTimeState(fromDate,toDate) workerPositionBenefit
                        where workerPositionBenefit.Worker == worker.RecId &&
                              workerPositionBenefit.LegalEntity == CompanyInfo::current() &&
                              workerPositionBenefit.Position == position.RecId &&
                              workerPositionBenefit.PayrollPeriod == payrollPeriod.RecId &&
                              workerPositionBenefit.Benefit == payElementTable.RecId &&
                              workerPositionBenefit.ValidFrom >= validFrom
                    {
                        workerPositionBenefit.delete();
                    }
    
                    workerPositionBenefit.clear();
                    workerPositionBenefit.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);
                    workerPositionBenefit.Worker        = worker.RecId;
                    workerPositionBenefit.LegalEntity   = CompanyInfo::current();
                    workerPositionBenefit.Position      = position.RecId;
                    workerPositionBenefit.PayrollPeriod = payrollPeriod.RecId;
                    workerPositionBenefit.Benefit       = payElementTable.RecId;
                    workerPositionBenefit.ValidFrom     = validFrom;
                    workerPositionBenefit.ValidTo       = dateMax();
                    workerPositionBenefit.AmountMonthly = cells.item(row, 9).value().double();
                    workerPositionBenefit.QtyMonthly    = cells.item(row, 10).value().double();
                    workerPositionBenefit.Currency      = currency;
                    workerPositionBenefit.insert();
                    createdRec = workerPositionBenefit.RecId;
                    if(validTo != dateMax())
                    {
                        select forUpdate validTimeState(fromDate,toDate) workerPositionBenefit
                            where workerPositionBenefit.RecId == createdRec;
                        if(workerPositionBenefit)
                        {
                            workerPositionBenefit.ValidTo = validTo;
                            workerPositionBenefit.update();
                        }
                    }
                }
            }
            info(strFmt('Uploaded row %1, worker %2.',row,worker.PersonnelNumber));
            type = cells.item(row+1, 1).value().variantType();
            progressCount++;
        }
        while (type != COMVariantType::VT_EMPTY);
        application.quit();
        ttsCommit;*/
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        if (false)
            return checkFailed("");
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    server static SPYUploadWorkerPayElement construct()
    {
        return new SPYUploadWorkerPayElement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    // Here goes a description of the class
    static ClassDescription description()
    {
        return "@SPY1113";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        SPYUploadWorkerPayElement    uploadWorkerPayElement;
    
        uploadWorkerPayElement = SPYUploadWorkerPayElement::construct();
    
        if (uploadWorkerPayElement.prompt())
            uploadWorkerPayElement.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>