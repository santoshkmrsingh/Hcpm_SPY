<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SPYUploadProfileCalendar</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SPYUploadProfileCalendar extends RunBaseBatch
{
    FileNAMe                fileNameOpen;
    AsciiStreamIo           fileIO;

    #define.CurrentVersion(1)
    #define.Version1(1)
    #localmacro.CurrentList
    fileNameOpen
    #endmacro


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///   
    /// </summary>
    /// <returns>
    ///    true if the class is shown in the list of <c>Journal</c> types; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    A class that can be used in a batch journal is a class where the same parameters can be used
    ///    repeatedly. The dialog box can be shown and the parameters can be changed, but parameters of some
    ///    classes might build on data that is only valid for a short time. Running a class two times with the
    ///    same parameters is not always possible. If the <c>RunBaseBatch.canGoBatch</c> method is false, this
    ///    method will not have any effect.
    /// </remarks>
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    // Specifies whether the functionality can run in a new session window
    public boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog box can be either built by using the <c>Dialog</c> class or by using a class that is
    ///    created in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase           dialog; //= super();
        FormBuildButtonControl  buttonControlUpload;
        DialogGroup             dlgGroup;
        FormBuildGroupControl   buttonGroup;

        dialog = super();

        dlgGroup = dialog.addGroup('');
        buttonGroup    = dialog.formBuildDesign().control(dlgGroup.formBuildGroup().id());
        buttonControlUpload  = buttonGroup.addControl(FormControlType::Button, 'Upload profile assignments against specific dates');
        buttonControlUpload.text("@SPY:UploadFile");
        buttonControlUpload.registerOverrideMethod(methodStr(FormButtonControl, clicked),
                                        methodStr(SPYHCPMBenefitJournalUpload, uploadClickedEvent),
                                        this);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>uploadClickedEvent</Name>
				<Source><![CDATA[
    private void uploadClickedEvent(FormButtonControl _formButtonControl)
    {
        FileUploadTemporaryStorageResult result = File::GetFileFromUser() as FileUploadTemporaryStorageResult;
        If (result && result.getUploadStatus())
        {
            fileIO = AsciiStreamIo::constructForRead(result.openResult());
            if (fileIO)
            {
                if (fileIO.status())
                {
                    throw error("@SPY:ImportingProblem");
                }
                fileIO.inFieldDelimiter(',');
                fileIO.inRecordDelimiter('\r\n');
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    public void dialogPostRun(DialogRunbase dialog)
    {
        ;
        super(dialog);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        if (! this.validate())
            throw error("");
    
        try
        {
            this.readCSV(fileIO);
        }
        catch(Exception::Error)
        {
            ttsabort;
            throw error("@SPY:ImportingException");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>readCSV</Name>
				<Source><![CDATA[
    public void readCSV(AsciiStreamIo  file)
    {
        COMVariantType          type;
        HcmWorkerRecId          worker;
        JmgProfileGroup         profileGroup;
        JmgProfileTable         profileTable;
        
        boolean                 errorWorker,errorProfileGroup,errorProfileTable;
        container               record;
        int                     cnt = 0,numberofUploadedRecords, noOfDays;
        HcmPersonnelNumberId    employeeId;
        
        ttsbegin;
        while (!file.status())
        {
            cnt++;
            record = file.read();

            if(cnt > 1)
            {
                for(noOfDays = 1; noOfDays<= 31; noOfDays++)
                {
                    this.insertRecordsToTable(record, noOfDays);
                }
            }  
        }
        ttscommit;
        info('Records Uploaded');
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRecordsToTable</Name>
				<Source><![CDATA[
    void insertRecordsToTable(container _record, int    _day)
    {
        str                     transdate, profileCalendarType, relationNumber, profileId;
        MonthName               monthName;
        Year                    yearValue;
        JmgProfileCalendar      profileCalendar;
        JmgProfileGroup         profileGroup;
        JmgProfileTable         profileTable;
        int                     monthNum;

        profileCalendarType = conpeek(_record,1);
        relationNumber      = conpeek(_record,2);
        monthName           = conPeek(_record,3);
        yearValue           = conPeek(_record,4);
        profileId           = conPeek(_record, _day + 4);


        switch(monthName)
        {
            case 'January':
                monthNum = 1;
            break;
            case 'February':
                monthNum = 2;
                break;
            case 'March':
                monthNum = 3;
                break;
            case 'April':
                monthNum = 4;
                break;
            case 'May':
                monthNum = 5;
                break;
            case 'June':
                monthNum = 6;
                break;
            case 'July':
                monthNum = 7;
                break;
            case 'August':
                monthNum = 8;
                break;
            case 'September':
                monthNum = 9;
                break;
            case 'October':
                monthNum = 10;
                break;
            case 'November':
                monthNum = 11;
                break;
            case 'December':
                monthNum = 12;
                break;
        }
        

        if(profileId)
        {
            ttsbegin;
            switch(profileCalendarType)
            {
                case 'Group':
                    select firstonly profileGroup
                        where profileGroup.ProfileGroupId == relationNumber;

                    if(profileGroup)
                    {
                        profileCalendar.ProfileCalendarType = JmgProfileCalendarType::ProfileGroup;
                        profileCalendar.RelationNumber      = relationNumber;
                        profileCalendar.ProfileId           = profileId;
                        profileCalendar.Date                = mkDate(_day, monthNum, yearValue);
                        profileCalendar.insert();
                    }
                    else
                    {
                        info(strFmt('%1 profile is not available on master table of profile.',relationNumber));
                    }
                    break;
                
                case 'Table':
                    if(HcmWorker::findByPersonnelNumber(relationNumber))
                    {
                        select firstonly profileCalendar
                            where profileCalendar.Date == mkDate(_day, monthNum, yearValue)
                                && profileCalendar.RelationNumber == relationNumber;
                        if(!profileCalendar)
                        {
                            profileCalendar.ProfileCalendarType = JmgProfileCalendarType::Employee;
                            profileCalendar.RelationNumber      = relationNumber;
                            profileCalendar.ProfileId           = profileId;
                            profileCalendar.Date                = mkDate(_day, monthNum, yearValue);
                            profileCalendar.insert();
                        }
                        else
                        {
                            select forupdate profileCalendar
                                where profileCalendar.Date == mkDate(_day, monthNum, yearValue)
                                        && profileCalendar.RelationNumber == relationNumber;
                            
                            if(profileCalendar)
                            {
                                ttsbegin;
                                profileCalendar.ProfileId   = profileId;
                                profileCalendar.update();
                                ttscommit;
                            }
                        }
                    }
                    else
                    {
                        info(strFmt('%1 Worker does not exists.',relationNumber));
                    }
                    break;
                
                case 'All':
                    if(JmgProfileTable::find(profileId).RecId)
                    {
                        profileCalendar.ProfileCalendarType = JmgProfileCalendarType::All;
                        profileCalendar.ProfileId           = profileId;
                        profileCalendar.Date                = mkDate(_day, monthNum, yearValue);
                        profileCalendar.insert();
                    }
                    else
                    {
                        info(strFmt('%1 profile does not exists in profile table.',profileId));
                    }
                    break;
                
                default:
                    info('No relation type found');
                    break;

            }
            ttscommit;

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    // Unpacking of parameters
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);
        ;
        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;
            default:
                return false;
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    // Validation
    public boolean validate(Object _calledFrom = null)
    {
        if (false)
            return checkFailed("");
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    server static SPYUploadProfileCalendar construct()
    {
        return new SPYUploadProfileCalendar();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        SPYUploadProfileCalendar    uploadProfileCalendar;
    
        uploadProfileCalendar = SPYUploadProfileCalendar::construct();
    
        if (uploadProfileCalendar.prompt())
                uploadProfileCalendar.runOperationNow();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>