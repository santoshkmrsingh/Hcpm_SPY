<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SPYUploadBenefitJournal</Name>
	<SourceCode>
		<Declaration><![CDATA[
// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
class SPYUploadBenefitJournal extends RunBaseBatch
{
    // Packed variables
    FileName               fileName;
    Description             journalDesc;
    SPYBenefitJournalType   journalType;

    // Dialog fields
    DialogField         dlgFileName;
    DialogField         dlgJrnDesc;
    DialogField         dlgJrnType;

    #define.CurrentVersion(1)
    #define.Version1(1)
    #localmacro.CurrentList
        fileName,
        journalDesc,
        journalType
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the class is shown in the list of <c>Journal</c> types.
    /// </summary>
    /// <returns>
    ///    true if the class is shown in the list of <c>Journal</c> types; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    A class that can be used in a batch journal is a class where the same parameters can be used
    ///    repeatedly. The dialog box can be shown and the parameters can be changed, but parameters of some
    ///    classes might build on data that is only valid for a short time. Running a class two times with the
    ///    same parameters is not always possible. If the <c>RunBaseBatch.canGoBatch</c> method is false, this
    ///    method will not have any effect.
    /// </remarks>
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog box can be either built by using the <c>Dialog</c> class or by using a class that is
    ///    created in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase       dialog = super();
        #resAppl
    
        //dialog.addImage(#ImageFolder);
        dialog.addInfoImage();
        dlgFileName = dialog.addFieldValue(extendedTypeStr(FileName),fileName);
        dlgJrnDesc = dialog.addFieldValue(extendedTypeStr(Description),journalDesc,"Journal description");
        dlgJrnType = dialog.addFieldValue(enumStr(SPYBenefitJournalType),journalType);
    
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    public void dialogPostRun(DialogRunbase dialog)
    {
    ;
        super(dialog);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        fileName    = dlgFileName.value();
        journalDesc = dlgJrnDesc.value();
        journalType = dlgJrnType.value();
    
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        this.upload();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);
    ;
        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;
            default:
                return false;
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>upload</Name>
				<Source><![CDATA[
    private void upload()
    {
        //TODO UPGRADE
        /*
        SysExcelApplication     application;
        SysExcelWorkbooks       workbooks;
        SysExcelWorkbook        workbook;
        SysExcelWorksheets      worksheets;
        SysExcelWorksheet       worksheet;
        SysExcelCells           cells;
    
        int                     row = 1;
        SPYPayrollPeriodLine    payrollPeriodLine;
        COMVariantType          type;
        HcmWorkerRecId          worker;
        SPYBenefitJournalTable  benefitJournalTable;
        SPYBenefitJournalTrans  benefitJournalTrans;
        SPYPayrollPeriodRecId   payrollPeriod;
        SPYPayElementRecId      benefit;
        boolean                 error;
    
        application = SysExcelApplication::construct();
        workbooks = application.workbooks();
    
        try
        {
            workbooks.open(filename);
        }
        catch (Exception::Error)
        {
            throw error("File cannot be opened.");
        }
        workbook = workbooks.item(1);
        worksheets = workbook.worksheets();
        worksheet = worksheets.itemFromNum(1);
        cells = worksheet.cells();
    
        try
        {
            ttsBegin;
            benefitJournalTable.BenefitJournalCode  = NumberSeq::newGetNum(SPYPayrollParameters::numRefBenefitJournalCode()).num();
            benefitJournalTable.Description         = journalDesc;
            benefitJournalTable.JournalType         = journalType;
            benefitJournalTable.insert();
            do
            {
                row++;
                error = false;
                worker              = HcmWorker::findByPersonnelNumber(cells.item(row, 1).value().bStr()).RecId;
                if(worker == 0)
                {
                    warning(strFmt("Employee id is not valid in row %1.",row));
                    error = true;
                }
                payrollPeriod = SPYPayrollPeriod::findByCode(cells.item(row, 2).value().bStr()).RecId;
                if(payrollPeriod == 0)
                {
                    warning(strFmt("Payroll period is not valid in row %1.",row));
                    error = true;
                }
                benefit = SPYPayElementTable::findByCode(cells.item(row, 4).value().bStr()).RecId;
                if(benefit == 0)
                {
                    warning(strFmt("Benefit code is not valid in row %1.",row));
                    error = true;
                }
                if(error == false)
                {
                    select firstOnly payrollPeriodLine
                        where payrollPeriodLine.PeriodStartDate <= cells.item(row, 3).value().date() &&
                              payrollPeriodLine.PeriodEndDate >= cells.item(row, 3).value().date() &&
                              payrollPeriodLine.PayrollPeriod == payrollPeriod;
                    benefitJournalTrans.clear();
                    benefitJournalTrans.initValue();
                    benefitJournalTrans.BenefitJournal              = benefitJournalTable.RecId;
                    benefitJournalTrans.LineNum                     = row - 1;
                    benefitJournalTrans.Worker                      = worker;
                    benefitJournalTrans.Benefit                     = benefit;
                    benefitJournalTrans.Quantity                    = cells.item(row, 6).value().double();
                    benefitJournalTrans.AccountingCurrencyAmount    = cells.item(row, 7).value().double();
                    benefitJournalTrans.TransactionCurrencyAmount   = cells.item(row, 7).value().double();
                    benefitJournalTrans.TransDate                   = cells.item(row, 3).value().date();
                    benefitJournalTrans.PayrollPeriodlLine          = payrollPeriodLine.RecId;
                    benefitJournalTrans.Txt                         = cells.item(row, 5).value().bStr();
                    benefitJournalTrans.insert();
                }
                else
                    error(strFmt("Row %1 is not imported.",row));
                type = cells.item(row+1, 1).value().variantType();
            }
            while (type != COMVariantType::VT_EMPTY);
            ttsCommit;
        }
        catch(Exception::Error)
        {
            throw error("Error occured.");
        }
        application.quit();
        info(strFmt('Benefit journal %1 uploaded.',benefitJournalTable.BenefitJournalCode),"",SysInfoAction_TableField::newBuffer(benefitJournalTable));
        */
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        if (false)
            return checkFailed("");
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    server static SPYUploadBenefitJournal construct()
    {
        return new SPYUploadBenefitJournal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    // Here goes a description of the class
    static ClassDescription description()
    {
        return "Upload benefit journal";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        SPYUploadBenefitJournal    uploadBenefitJournal;
    
        uploadBenefitJournal = SPYUploadBenefitJournal::construct();
    
        if (uploadBenefitJournal.prompt())
            uploadBenefitJournal.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>