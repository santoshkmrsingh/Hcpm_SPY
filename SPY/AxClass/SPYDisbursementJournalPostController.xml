<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SPYDisbursementJournalPostController</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SysOperationJournaledParametersAttribute(true)]
class SPYDisbursementJournalPostController extends SysOperationServiceController
{
    FormRun                         payProcessEdit;
    SPYDisbursementJournalPostContract      payrollJourPostContract;
    SPYPayrollJournalId             payrollJournalId;
    container                       testNumCon;
    #define.CurrentVersion(2)
    #localmacro.VersionList
        testNumCon
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public IDialogable dialog()
    {
        if (!payProcessEdit)
        {
            payProcessEdit = classfactory.formRunClass(SPYDisbursementJournalPostController::newClientArgs(formStr(SPYDisbursementJourPostEdit), this));
            payProcessEdit.init();
        }
    
        return payProcessEdit as IDialogable;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogMake</Name>
				<Source><![CDATA[
    protected IDialogable dialogMake()
    {
        IDialogable dlg = this.dialog();
    
        if (this.canGoBatch())
           this.batchInfo().dialog(dlg);
    
        return dlg;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    protected void dialogPostRun()
    {
        //super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupDialog</Name>
				<Source><![CDATA[
    protected void  cleanupDialog()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogRun</Name>
				<Source><![CDATA[
    protected SysOperationStartResult dialogRun()
    {
        SysOperationStartResult result;
        CompanyId               companyId = curext();

        result = super();

        if (result == SysOperationStartResult::Canceled)
        {
            this.cleanupDialog();
        }

        if(companyId != curext())
        {
            appl.setDefaultCompany(companyId, false);
        }
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPayProcessContract</Name>
				<Source><![CDATA[
    public SPYDisbursementJournalPostContract getPayProcessContract()
    {
        return payrollJourPostContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPayrollJournalId</Name>
				<Source><![CDATA[
    SPYPayrollJournalId parmPayrollJournalId(SPYPayrollJournalId _payrollJournalId = payrollJournalId)
    {
        payrollJournalId = _payrollJournalId;
    
        return payrollJournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmServiceContract</Name>
				<Source><![CDATA[
    public SPYDisbursementJournalPostContract parmServiceContract(SPYDisbursementJournalPostContract _payrollJourPostContract = payrollJourPostContract)
    {
        payrollJourPostContract = _payrollJourPostContract;
        return payrollJourPostContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        this.parmClassName(classStr(SPYDisbursementJournalPostService));
        this.parmMethodName(methodStr(SPYDisbursementJournalPostService,post));
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        SPYDisbursementJournalPostController     disbursementJournalPostController;
        str                                     className, methodName;
        SysOperationExecutionMode               mode;
        SPYDisbursementJournalTable             disbursementJournalTable;
    
        [className, methodName, mode] = SysOperationServiceController::parseServiceInfo(args);
        mode = SysOperationExecutionMode::Synchronous; 
        disbursementJournalPostController = new SPYDisbursementJournalPostController();
        disbursementJournalPostController.parmExecutionMode(mode);

        if (args.record() is SPYDisbursementJournalTable)
        {
            disbursementJournalTable = args.record() as SPYDisbursementJournalTable;
        }
        disbursementJournalPostController.parmPayrollJournalId(disbursementJournalTable.JournalId);

        if (disbursementJournalPostController.prompt())
        {
            disbursementJournalPostController.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newClientArgs</Name>
				<Source><![CDATA[
    client static Args  newClientArgs(str _formName, SPYDisbursementJournalPostController _disbursementJournalPostController)
    {
        Args  args = new  Args();
        args.name(_formName);
        args.caller(_disbursementJournalPostController);
        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name = "packedState"></param>
    /// <returns></returns>
    public boolean unpack(container packedState)
    {
        container   packedSuper;
        boolean     ret;
        int         version;

        version = SysOperationHelper::getVersion(packedState);

        switch (version)
        {
            case #CurrentVersion:
                [version, #VersionList, packedSuper] = packedState;
                ret = super(packedState);
                break;
            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>