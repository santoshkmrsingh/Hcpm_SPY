<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SPYHCPMPayrollAdjustmentJournalUpload</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SPYHCPMPayrollAdjustmentJournalUpload extends RunBaseBatch
{
    FileName                fileNameOpen;
    //DialogField             dlgfileName;
    AsciiStreamIo           fileIO;
    DialogField             dlgJrnDesc;
    Description             journalDesc;

    #define.CurrentVersion(1)
    #define.Version1(1)
    #localmacro.CurrentList
    journalDesc
    #endmacro


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the class is shown in the list of <c>Journal</c> types.
    /// </summary>
    /// <returns>
    ///    true if the class is shown in the list of <c>Journal</c> types; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    A class that can be used in a batch journal is a class where the same parameters can be used
    ///    repeatedly. The dialog box can be shown and the parameters can be changed, but parameters of some
    ///    classes might build on data that is only valid for a short time. Running a class two times with the
    ///    same parameters is not always possible. If the <c>RunBaseBatch.canGoBatch</c> method is false, this
    ///    method will not have any effect.
    /// </remarks>
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    // Specifies whether the functionality can run in a new session window
    public boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog box can be either built by using the <c>Dialog</c> class or by using a class that is
    ///    created in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase           dialog; //= super();
        FormBuildButtonControl  buttonControlUpload;
        DialogGroup             dlgGroup;
        FormBuildGroupControl   buttonGroup;

        dialog = super();

        dlgGroup = dialog.addGroup('');
        buttonGroup    = dialog.formBuildDesign().control(dlgGroup.formBuildGroup().id());
        buttonControlUpload  = buttonGroup.addControl(FormControlType::Button, "@SPY:UploadPayAdjustmentJournalDetails");
        buttonControlUpload.text("@SPY:UploadFile");
        buttonControlUpload.registerOverrideMethod(methodStr(FormButtonControl, clicked),
                                        methodStr(SPYHCPMPayrollAdjustmentJournalUpload, uploadClickedEvent),
                                        this);

        dlgJrnDesc = dialog.addFieldValue(extendedTypeStr(Description),journalDesc,"@SPY:JournalDescription");
        
        /*
        dialog.addImage(#ImageExcel_Dyn01);
        dialog.addInfoImage();
        dlgFileName = dialog.addFieldValue(extendedTypeStr(FileNameOpen),fileNameOpen);
        */
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>uploadClickedEvent</Name>
				<Source><![CDATA[
    private void uploadClickedEvent(FormButtonControl _formButtonControl)
    {
        FileUploadTemporaryStorageResult result = File::GetFileFromUser() as FileUploadTemporaryStorageResult;
        If (result && result.getUploadStatus())
        {
            fileIO = AsciiStreamIo::constructForRead(result.openResult());
            if (fileIO)
            {
                if (fileIO.status())
                {
                    throw error("@SPY:ImportingProblem");
                }
                fileIO.inFieldDelimiter(',');
                fileIO.inRecordDelimiter('\r\n');
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    public void dialogPostRun(DialogRunbase dialog)
    {
        ;
        super(dialog);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        journalDesc = dlgJrnDesc.value();
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        if (! this.validate())
            throw error("");
    
        try
        {
            this.readCSV(fileIO);
        }
        catch(Exception::Error)
        {
            ttsabort;
            throw error("@SPY:ImportingException");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>readCSV</Name>
				<Source><![CDATA[
    public void readCSV(AsciiStreamIo  file)
    {
        COMVariantType                  type;
        HcmWorkerRecId                  worker;
        SPYPayrollEarningsJournalTable  payrollearningsJournalTable,payrollearningsJournalTabledeleted;
        SPYPayrollEarningsJournalTrans  payrollearningsJournalTrans;
        SPYPayElementCode               payElementCode;
        SPYPayrollPeriodRecId           payrollPeriodRecid;
        SPYPayrollPeriod                payrollPeriodTable;
        SPYPayrollPeriodLine            payrollPeriodLine;
        SPYPayElementRecId              benefit;
        boolean                         errorWorker,errorPayElementCode;//,errorPayrollPeriod,errorBenefitPayelement;
        container                       record;
        int                             cnt = 0,numberofUploadedRecords;
        HcmPersonnelNumberId            employeeId;
        
        str                             adjustmentDate;
        Description255                  description;
        Qty                             qty;
        Amount                          amount;
        CurrencyCode                    currencyCode;
        SPYPayrollPeriodCode            payrollPeriodCode;
        
        ttsbegin;
        while (!file.status())
        {
            cnt++;
            record = file.read();

            employeeId              = conpeek(record,1);
            payElementCode          = conpeek(record,2);
            description             = conpeek(record,3);
            adjustmentDate          = conpeek(record,4);
            amount                  = conpeek(record,5);
            currencyCode            = conpeek(record,6);
            payrollPeriodCode       = conpeek(record,7);

            if(cnt == 1)
            {
                // Creation of Benefit Journal Header
                payrollearningsJournalTable.JournalCode    = Numberseq::newGetNum(SPYPayrollParameters::numRefPayrollEarningsJournalCode()).num();
                payrollearningsJournalTable.Description    = journalDesc;
                payrollearningsJournalTable.WorkflowStatus = SPYWorkflowStatus::Created;

                payrollearningsJournalTable.insert();
            }
            
            if(cnt != 1 && cnt != 0)
            {
                errorWorker             = false;
                errorPayElementCode     = false;

                int i = conLen(record);
                if (conLen(record))
                {
                    //Check for worker
                    worker = Hcmworker::findByPersonnelNumber(employeeId).RecId;
                    if(worker == 0)
                    {
                        warning(strfmt("@SPY:EmployeeIdnotValid",cnt));
                        errorWorker = true;
                    }

                    if(!SPYPayElementTable::findByCode(payElementCode))
                    {
                        warning(strfmt("@SPY:PayElementNotFound",payElementCode,cnt));
                        errorPayElementCode = true;
                    }

                    if(errorWorker == false && errorPayElementCode == false)
                    {
                        payrollearningsJournalTrans.PayrollEarningsJournal  = payrollearningsJournalTable.RecId;
                        payrollearningsJournalTrans.LineNum                 = cnt-1;
                        payrollearningsJournalTrans.Worker                  = worker;
                        payrollearningsJournalTrans.Payroll                 = SPYPayElementTable::findByCode(payElementCode).RecId;
                        payrollearningsJournalTrans.Txt                     = description;
                        payrollearningsJournalTrans.TransDate               = str2Date(adjustmentDate,213);
                        payrollearningsJournalTrans.Amount                  = amount;
                        payrollearningsJournalTrans.Currency                = currencyCode;

                        select firstonly payrollPeriodLine join payrollPeriodTable 
                            where payrollPeriodLine.PayrollPeriod == payrollperiodtable.RecId 
                               && payrollPeriodTable.PayrollPeriodCode == payrollPeriodCode
                               && payrollPeriodLine.PeriodStartDate <= payrollearningsJournalTrans.TransDate
                               && payrollPeriodLine.PeriodEndDate >= payrollearningsJournalTrans.TransDate;

                        payrollearningsJournalTrans.PayrollPeriodlLine = payrollperiodline.RecId;
                        if(SPYPayrollPeriodLine::find(payrollperiodline.RecId))
                        {
                            payrollearningsJournalTrans.insert();
                        }
                        else
                        {
                            warning(strfmt("@SPY:PayrollPeriodLineNotFound",cnt));
                        }
                    }
                    if(payrollearningsJournalTrans.RecId == 0)
                    {
                        if(payrollearningsJournalTable.RecId != 0)
                        {
                            delete_from payrollearningsJournalTabledeleted where payrollearningsJournalTabledeleted.RecId == payrollearningsJournalTable.RecId;
                            throw error(strfmt("@SPY:LinenotCreated",cnt));
                        }
                    }
                }
            }
        }
        ttscommit;
        info(strfmt("@SPY:UploadedRecords",cnt-1));
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    // Unpacking of parameters
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);
        ;
        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;
            default:
                return false;
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    // Validation
    public boolean validate(Object _calledFrom = null)
    {
        if (false)
            return checkFailed("");
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    server static SPYHCPMPayrollAdjustmentJournalUpload construct()
    {
        return new SPYHCPMPayrollAdjustmentJournalUpload();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SPY:PayrollAdjustmentsJournalUpload";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        SPYHCPMPayrollAdjustmentJournalUpload    payrollAdjustmentUpload;
    
        payrollAdjustmentUpload = SPYHCPMPayrollAdjustmentJournalUpload::construct();
    
        if (payrollAdjustmentUpload.prompt())
            payrollAdjustmentUpload.runOperationNow();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>