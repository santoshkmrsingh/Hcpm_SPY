<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SPYAbsenceAccrualUpdateService</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SPYAbsenceAccrualUpdateService extends SysOperationServiceBase
{
    LegalEntityRecId                    legalEntity;
    SPYPayrollPeriodLineRecId           payrollPeriodLine;
    SPYPayrollPeriodLine                payrollPeriodLineTab;
    SPYPayrollPeriod                    payrollPeriod;
    date                                periodStart,periodEnd;
    HcmWorker                           hcmWorker;
    HcmEmployment                       hcmEmployment;
    HcmEmploymentDetail                 hcmEmploymentDetail;
    SPYWorkerPositionAbsenceConfigLine      workerPositionAbsenceConfigLine;
    QueryRun                            hcmWorkerQueryRun;

    SPYAbsenceAccrualUpdateContract     contract;
    List                                workerList;
    date                                effectiveStartDate,effectiveEndDate;
    date                                workerJoiningDate,workerTerminationDate;
    WorkCalendarTable                   workCalendarTable;
    str                                 workerValidationText;
    List                                periodList;

    RecordInsertList                    absenceLedgerList;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearWorkerValidationText</Name>
				<Source><![CDATA[
    protected void clearWorkerValidationText()
    {
        workerValidationText = "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>commitTransaction</Name>
				<Source><![CDATA[
    private void commitTransaction()
    {
        absenceLedgerList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteLedger</Name>
				<Source><![CDATA[
    private void deleteLedger()
    {
        SPYAbsenceLedger        absenceLedger;
    
        delete_from absenceLedger
            where absenceLedger.Worker == hcmWorker.RecId &&
                  absenceLedger.HRMAbsenceCodeId == workerPositionAbsenceConfigLine.HRMAbsenceCodeId &&
                  absenceLedger.EntryType == SPYAbsenceLedgerEntryType::Transaction &&
                  absenceLedger.SourceDocument == tableNum(SPYAbsenceConfigTable) &&
                  absenceLedger.AbsenceDate >= effectiveStartDate &&
                  absenceLedger.AbsenceDate <= effectiveEndDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQty</Name>
				<Source><![CDATA[
    private SPYAmount getQty()
    {
        SPYWorkerPositionBenefit        workerBenefit;
        SPYAmount                       ret;
    
        if(workerPositionAbsenceConfigLine.FetchBenefitQty == true)
        {
            select firstonly validTimeState(effectiveStartDate,effectiveEndDate) workerBenefit
                where workerBenefit.Worker == hcmWorker.RecId &&
                      workerBenefit.LegalEntity == legalEntity &&
                      workerBenefit.Benefit == HRMAbsenceCode::find(workerPositionAbsenceConfigLine.HRMAbsenceCodeId).SPYBenefit;
    
            switch(payrollPeriod.PayrollFrequency)
            {
                case SPYPayrollFrequency::Annually :
                    ret = workerBenefit.QtyAnnual;
                    break;
    
                case SPYPayrollFrequency::Semiannually :
                    ret = workerBenefit.QtySemiAnnual;
                    break;
    
                case SPYPayrollFrequency::Quarterly :
                    ret = workerBenefit.QtyQuarterly;
                    break;
    
                case SPYPayrollFrequency::Monthly :
                    ret = workerBenefit.QtyMonthly;
                    break;
    
                case SPYPayrollFrequency::Biweekly :
                    ret = workerBenefit.QtyBiWeekly;
                    break;
    
                case SPYPayrollFrequency::Weekly :
                    ret = workerBenefit.QtyWeekly;
                    break;
    
                case SPYPayrollFrequency::Daily :
                    ret = workerBenefit.QtyDaily;
                    break;
            }
        }
        else
            ret = workerPositionAbsenceConfigLine.Qty;
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    public void process(SPYAbsenceAccrualUpdateContract _contract)
    {
        #AviFiles
        SysOperationProgress    progress = new SysOperationProgress();
        int                     progressCount;
        ListEnumerator          workerListEnumerator;
        ListEnumerator          periodListEnumerator;
    
        contract = _contract;
        legalEntity = contract.parmLegalEntity();
        changeCompany(CompanyInfo::findRecId(legalEntity).DataArea)
        {
            absenceLedgerList = new RecordInsertList(tableNum(SPYAbsenceLedger));
            workerList = new List(Types::Int64);
            periodList = new List(Types::Int64);
            this.setPeriodList(contract.parmFromPayrollPeriodLine(),contract.parmToPayrollPeriodLine());
            this.setWorkerQuery(contract.parmWorkerQuery());
            progress.setCaption("@SPY1533");
            progress.setAnimation(#AviUpdate);
            progress.setTotal(workerList.elements() * periodList.elements());
            progressCount = 1;
            setPrefix(strFmt("@SPY1534"));
            if(this.validate() == false)
                throw error("@SPY1530");
            try
            {
                ttsBegin;
                periodListEnumerator = periodList.getEnumerator();
                while(periodListEnumerator.moveNext())
                {
                    this.setPeriod(periodListEnumerator.current());
                    workerListEnumerator = workerList.getEnumerator();
                    while(workerListEnumerator.moveNext())
                    {
                        this.clearWorkerValidationText();
                        this.setWorker(workerListEnumerator.current());
                        this.setEmployment();
                        this.setDates();
                        progress.setText(strfmt("@SPY1552", hcmWorker.name(),hcmWorker.PersonnelNumber,periodStart,periodEnd));
                        progress.setCount(progressCount, 1);
                        if(this.ValidateWorker() == false)
                        {
                            setPrefix(strfmt("@SPY1552", hcmWorker.name(),hcmWorker.PersonnelNumber,periodStart,periodEnd));
                            this.showWorkerValidationText();
                            error(strFmt("@SPY1541",hcmWorker.name(),hcmWorker.PersonnelNumber));
                        }
                        else
                        {
                            this.updateAbsence();
                        }
                        progressCount++;
                    }
                }
                this.commitTransaction();
                info("@SPY1540");
                ttsCommit;
            }
            catch(Exception::Error)
            {
                ttsAbort;
                error("@SPY252");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAbsenceConfiguration</Name>
				<Source><![CDATA[
    private void setAbsenceConfiguration()
    {
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDates</Name>
				<Source><![CDATA[
    private void setDates()
    {
        workerJoiningDate = DateTimeUtil::date(
                            DateTimeUtil::applyTimeZoneOffset(hcmEmployment.ValidFrom,DateTimeUtil::getCompanyTimeZone()));
        workerTerminationDate = DateTimeUtil::date(
                                DateTimeUtil::applyTimeZoneOffset(hcmEmployment.ValidTo,DateTimeUtil::getCompanyTimeZone()));
        effectiveStartDate = max(periodStart,workerJoiningDate);
        effectiveEndDate = min(periodEnd,workerTerminationDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEmployment</Name>
				<Source><![CDATA[
    private void setEmployment()
    {
        TransDateTime       startDateTime,endDateTime;
    
        startDateTime = DateTimeUtil::newDateTime(periodStart,00-00);
        endDateTime = DateTimeUtil::newDateTime(periodEnd,00-00);
        hcmEmployment = HcmEmployment::findByWorkerLegalEntity(hcmWorker.RecId,legalEntity,startDateTime,endDateTime);
        hcmEmploymentDetail = HcmEmploymentDetail::findByEmployment(hcmEmployment.RecId,startDateTime,endDateTime);
        workCalendarTable = WorkCalendarTable::find(WorkCalendarEmployment::findByEmploymentRecId(hcmEmployment.RecId).CalendarId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPeriod</Name>
				<Source><![CDATA[
    private void setPeriod(SPYPayrollPeriodLineRecId  _payrollPeriodLine)
    {
        payrollPeriodLine = _payrollPeriodLine;
        payrollPeriodLineTab = SPYPayrollPeriodLine::find(_payrollPeriodLine);
        payrollPeriod = SPYPayrollPeriod::find(payrollPeriodLineTab.PayrollPeriod);
        periodStart = payrollPeriodLineTab.PeriodStartDate;
        periodEnd = payrollPeriodLineTab.PeriodEndDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPeriodList</Name>
				<Source><![CDATA[
    private void setPeriodList(SPYPayrollPeriodLineRecId _fromPeriod,SPYPayrollPeriodLineRecId _toPeriod)
    {
        SPYPayrollPeriodLineRecId   payrollPeriodLineCounter;
    
        periodList.addEnd(_fromPeriod);
        payrollPeriodLineCounter = SPYPayrollPeriodLine::findNextPeriodLine(_fromPeriod).RecId;
        while(payrollPeriodLineCounter <= _toPeriod)
        {
            if(payrollPeriodLineCounter)
                periodList.addEnd(payrollPeriodLineCounter);
            payrollPeriodLineCounter = SPYPayrollPeriodLine::findNextPeriodLine(payrollPeriodLineCounter).RecId;
            if(payrollPeriodLineCounter == 0)
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWorker</Name>
				<Source><![CDATA[
    private void setWorker(HcmWorkerRecId _worker)
    {
        hcmWorker = HcmWorker::find(_worker);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWorkerQuery</Name>
				<Source><![CDATA[
    private void setWorkerQuery(container _workerQuery)
    {
        hcmWorkerQueryRun = new QueryRun(_workerQuery);
        while(hcmWorkerQueryRun.next())
        {
            workerList.addEnd(hcmWorkerQueryRun.get(tableNum(HcmWorker)).RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showWorkerValidationText</Name>
				<Source><![CDATA[
    protected void showWorkerValidationText()
    {
        warning(workerValidationText);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAbsence</Name>
				<Source><![CDATA[
    private void updateAbsence()
    {
        while select validtimestate(periodEnd) workerPositionAbsenceConfigLine
            where workerPositionAbsenceConfigLine.Worker == hcmWorker.RecId &&
            workerPositionAbsenceConfigLine.LegalEntity == legalEntity &&
            workerPositionAbsenceConfigLine.EntitlementPayrollPeriod == payrollPeriod.RecId
        {
            this.deleteLedger();
            this.updateLedger();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedger</Name>
				<Source><![CDATA[
    private void updateLedger()
    {
        SPYAbsenceLedger        absenceLedger;
        date                    absenceDate;
        Qty                     absenceDays,lineQty;

        lineQty = this.getQty();
        if(workerPositionAbsenceConfigLine.AccruedQty == SPYAbsenceAccruedQty::Full)
        absenceDays = lineQty;
        else
        absenceDays = lineQty * (effectiveEndDate - effectiveStartDate + 1) / (periodEnd - periodStart + 1);
        if(absenceDays)
        {
            if(SPYPayrollPeriod::find(workerPositionAbsenceConfigLine.EntitlementPayrollPeriod).PayrollFrequency == SPYPayrollFrequency::Annually)
                this.setAnnualPeriodDates();
            if(workerPositionAbsenceConfigLine.AccruedDate == SPYAbsenceAccruedDate::PeriodStart)
                absenceDate = effectiveStartDate;
            else
                absenceDate = effectiveEndDate;
            absenceLedger.initValue();
            absenceLedger.Worker = hcmWorker.RecId;
            absenceLedger.EntryType = SPYAbsenceLedgerEntryType::Transaction;
            absenceLedger.HRMAbsenceCodeId = workerPositionAbsenceConfigLine.HRMAbsenceCodeId;
            absenceLedger.AbsenceDate = absenceDate;
            absenceLedger.TransDate = absenceDate;
            absenceLedger.AbsenceDays = absenceDays;
            absenceLedger.AbsenceHours = absenceDays * workCalendarTable.StandardWorkDayHours;
            absenceLedger.Txt = strFmt("@SPY1539");
            absenceLedger.SourceDocument = tableNum(SPYAbsenceConfigTable);

            absenceLedgerList.add(absenceLedger);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    private boolean validate()
    {
        boolean     ret = true;
    
        if(payrollPeriodLineTab.PeriodStatus == SPYPayrollPeriodStatus::Closed)
            ret = checkFailed("@SPY1531");
        if(payrollPeriodLineTab.PeriodStatus == SPYPayrollPeriodStatus::Stopped)
            ret = checkFailed("@SPY1532");
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ValidateWorker</Name>
				<Source><![CDATA[
    private boolean ValidateWorker()
    {
        boolean ret = true;
    
        if(workerJoiningDate > periodEnd || workerTerminationDate < periodStart)
        {
            workerValidationText = workerValidationText + "\n" + strFmt("@SPY1543");
            ret = false;
        }
        if(!workCalendarTable.RecId)
        {
            workerValidationText = workerValidationText + "\n" + strFmt("@SPY1538");
            ret = false;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAnnualPeriodDates</Name>
				<Source><![CDATA[
    private void setAnnualPeriodDates()
    {
        int     joiningDay,joiningMonth;
        date    anniversaryJoiningDate;

        if(workerPositionAbsenceConfigLine.AbsenceCycle == SPYAbsenceCycle::AnniversaryYear)
        {
            joiningDay = dayOfMth(workerJoiningDate);
            joiningMonth = mthOfYr(workerJoiningDate);
            anniversaryJoiningDate = mkDate(joiningDay,joiningMonth,year(periodEnd));
            effectiveStartDate = anniversaryJoiningDate;
            effectiveEndDate = mkDate(joiningDay,joiningMonth,year(periodStart) + 1);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>