<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SPYPromotionTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SPYPromotionTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canSubmitToWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    public boolean canSubmitToWorkflow(str _workflowType = '')
    {
        boolean                     ret;
        SPYPromotionWorkerTable     promotionWorkerTable;

        ret = super(_workflowType);

        if(this.WorkflowStatus == SPYWorkflowStatus::Created)
        {
            select count(recid) from promotionWorkerTable
            where promotionWorkerTable.Promotion == this.RecId;
            if(promotionWorkerTable.RecId > 0)
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitToWorkflow</Name>
				<Source><![CDATA[
    public void  submitToWorkflow(WorkflowTypeName      _workflowTemplateName,
                              WorkflowComment       _workflowComment,
                              boolean               _activatingFromWeb = false)
    {
        Workflow::activateFromWorkflowType(_workflowTemplateName,
                                       this.RecId,
                                       _workflowComment,
                                       _activatingFromWeb,
                                       curUserId());

        SPYPromotionTable::updateWorkflowStatus(this.RecId,SPYWorkflowStatus::Submitted);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkerPayelements</Name>
				<Source><![CDATA[
    public void updateWorkerPayelements()
    {
        SPYPromotionWorkerTable                 promotionWorkerTable;
        SPYPromotionWorkerProposedPayroll       promotionWorkerProposedPayroll;
        SPYPromotionWorkerProposedBenefit       promotionWorkerProposedBenefit;
        SPYWorkerPositionPayroll                workerPositionPayroll;
        SPYWorkerPositionBenefit                workerPositionBenefit;
        TransDate                               currentDate;

        SPYPromotionTable        promotionTable = SPYPromotionTable::find(this.RecId);
        if(promotionTable)
        {
            currentDate = promotionTable.StartDate;
            ttsBegin;
            While select promotionWorkerProposedBenefit join promotionWorkerTable join promotionTable
            where  promotionWorkerProposedBenefit.PromotionWorker == promotionWorkerTable.RecId
            &&     promotionWorkerTable.Promotion == promotionTable.RecId
            {
                ttsBegin;
                select forUpdate ValidTimeState(currentDate, currentDate) workerPositionBenefit where  workerPositionBenefit.Benefit == promotionWorkerProposedBenefit.Benefit
                                && workerPositionBenefit.Worker == promotionWorkerTable.Worker;
                if(workerPositionBenefit &&
                  (workerPositionBenefit.QtyAnnual != promotionWorkerProposedBenefit.QtyAnnual ||
                   workerPositionBenefit.QtyMonthly != promotionWorkerProposedBenefit.QtyMonthly ||
                   workerPositionBenefit.AmountAnnual != promotionWorkerProposedBenefit.AmountAnnual ||
                   workerPositionBenefit.AmountMonthly != promotionWorkerProposedBenefit.Monthly))
                {
                    workerPositionBenefit.validTimeStateUpdateMode(ValidTimeStateUpdate::EffectiveBased);
                    workerPositionBenefit.Benefit = promotionWorkerProposedBenefit.Benefit;
                    workerPositionBenefit.AmountMonthly = promotionWorkerProposedBenefit.Monthly;
                    workerPositionBenefit.QtyAnnual = promotionWorkerProposedBenefit.QtyAnnual;
                    workerPositionBenefit.QtyMonthly = promotionWorkerProposedBenefit.QtyMonthly;
                    workerPositionBenefit.AmountAnnual = promotionWorkerProposedBenefit.AmountAnnual;
                    workerPositionBenefit.ValidFrom = currentDate;
                    workerPositionBenefit.ValidTo = dateMax();
                    workerPositionBenefit.LegalEntity = CompanyInfo::current();
                    // workerPositionBenefit.Currency = 'AED';
                    workerPositionBenefit.Worker = promotionWorkerTable.Worker;
                    workerPositionBenefit.update();   
                }
                ttsCommit;
            }
            While select promotionWorkerProposedPayroll join promotionWorkerTable join promotionTable
            where  promotionWorkerProposedPayroll.PromotionWorker == promotionWorkerTable.RecId
            &&     promotionWorkerTable.Promotion == promotionTable.RecId
            {
                ttsBegin;
                select forUpdate ValidTimeState(currentDate, currentDate) workerPositionPayroll where  workerPositionPayroll.Payroll == promotionWorkerProposedPayroll.Payroll
                            && workerPositionPayroll.Worker == promotionWorkerTable.Worker;
                if(workerPositionPayroll && workerPositionPayroll.Monthly != promotionWorkerProposedPayroll.Monthly)
                {
                    workerPositionPayroll.validTimeStateUpdateMode(ValidTimeStateUpdate::EffectiveBased);
                    workerPositionPayroll.Payroll = promotionWorkerProposedPayroll.Payroll;
                    workerPositionPayroll.Monthly = promotionWorkerProposedPayroll.Monthly;
                    workerPositionPayroll.ValidFrom = currentDate;
                    workerPositionPayroll.ValidTo = dateMax();
                    //workerPositionPayroll.Currency = 'AED';
                    workerPositionPayroll.Worker = promotionWorkerTable.Worker;
                    workerPositionBenefit.LegalEntity = CompanyInfo::current();
                    workerPositionPayroll.update();               
                }
                ttsCommit;
            }
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkerPayelementsToExpire</Name>
				<Source><![CDATA[
    //</NE by Rakesh Oct 5 2018>
    /// <summary>
    /// New method to update worker pay elemnts by rakesh Oct 4 2018
    /// </summary>
    public void updateWorkerPayelementsToExpire()
    {
        SPYPromotionWorkerTable                 promotionWorkerTableExpire;
        SPYPromotionWorkerProposedPayroll       promotionWorkerProposedPayrollExpire;
        SPYPromotionWorkerProposedBenefit       promotionWorkerProposedBenefitExpire;
        SPYWorkerPositionPayroll                workerPositionPayrollExpire;
        SPYWorkerPositionBenefit                workerPositionBenefitExpire;
        TransDate                               currentDate;

        SPYPromotionTable        promotionTableExpire = SPYPromotionTable::find(this.RecId);
        if(promotionTableExpire)
        {
            currentDate = promotionTableExpire.StartDate;
            ttsBegin;
            while select promotionWorkerTableExpire
                where promotionWorkerTableExpire.Promotion == promotionTableExpire.RecId
            join promotionWorkerProposedBenefitExpire
                where promotionWorkerProposedBenefitExpire.PromotionWorker == promotionWorkerTableExpire.RecId
            {
                ttsBegin;
                select forUpdate ValidTimeState(currentDate, currentDate) workerPositionBenefitExpire
                    where  workerPositionBenefitExpire.Benefit == promotionWorkerProposedBenefitExpire.Benefit
                                && workerPositionBenefitExpire.Worker == promotionWorkerTableExpire.Worker
                                && workerPositionBenefitExpire.ValidTo == datemax();
                
                if(workerPositionBenefitExpire)
                {
                    workerPositionBenefitExpire.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);
                    workerPositionBenefitExpire.Benefit = promotionWorkerProposedBenefitExpire.Benefit;
                    workerPositionBenefitExpire.AmountMonthly = promotionWorkerProposedBenefitExpire.Monthly;
                    workerPositionBenefitExpire.QtyAnnual = promotionWorkerProposedBenefitExpire.QtyAnnual;
                    workerPositionBenefitExpire.QtyMonthly = promotionWorkerProposedBenefitExpire.QtyMonthly;
                    workerPositionBenefitExpire.AmountAnnual = promotionWorkerProposedBenefitExpire.AmountAnnual;
                    workerPositionBenefitExpire.ValidTo = (currentDate - 1);
                    workerPositionBenefitExpire.LegalEntity = CompanyInfo::current();
                    workerPositionBenefitExpire.Worker = promotionWorkerTableExpire.Worker;
                    workerPositionBenefitExpire.update();
                }
                ttsCommit;
            }
            
            while select promotionWorkerTableExpire
                where promotionWorkerTableExpire.Promotion == promotionTableExpire.RecId
            join promotionWorkerProposedPayrollExpire
                where promotionWorkerProposedPayrollExpire.PromotionWorker == promotionWorkerTableExpire.RecId
            {
                ttsBegin;
                select forUpdate ValidTimeState(currentDate, currentDate) workerPositionPayrollExpire
                    where  workerPositionPayrollExpire.Payroll == promotionWorkerProposedPayrollExpire.Payroll
                            && workerPositionPayrollExpire.Worker == promotionWorkerTableExpire.Worker
                            && workerPositionPayrollExpire.ValidTo == datemax();
                if(workerPositionPayrollExpire)
                {
                    workerPositionPayrollExpire.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);
                    workerPositionPayrollExpire.Payroll     = promotionWorkerProposedPayrollExpire.Payroll;
                    workerPositionPayrollExpire.Monthly     = promotionWorkerProposedPayrollExpire.Monthly;
                    workerPositionPayrollExpire.ValidTo     = (currentDate - 1);
                    workerPositionPayrollExpire.Worker      = promotionWorkerTableExpire.Worker;
                    workerPositionPayrollExpire.LegalEntity = CompanyInfo::current();
                    workerPositionPayrollExpire.update();
                }
                ttsCommit;
            }
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertWorkerPayelements</Name>
				<Source><![CDATA[
    /// <summary>
    /// New method to Insert worker pay elemnts by rakesh Oct 4 2018
    /// </summary>
    public void insertWorkerPayelements()
    {
        SPYPromotionWorkerTable                 promotionWorkerTableInsert;
        SPYPromotionWorkerProposedPayroll       promotionWorkerProposedPayrollInsert;
        SPYPromotionWorkerProposedBenefit       promotionWorkerProposedBenefitInsert;
        SPYWorkerPositionPayroll                workerPositionPayrollInsert;
        SPYWorkerPositionBenefit                workerPositionBenefitInsert;
        TransDate                               currentDate;
        RecordInsertList                        workerPositionPayrollInsertList, workerPositionBenefitInsertList;

        workerPositionPayrollInsertList         = new RecordInsertList(tableNum(SPYPromotionWorkerProposedPayroll));
        workerPositionBenefitInsertList         = new RecordInsertList(tableNum(SPYPromotionWorkerProposedBenefit));

        SPYPromotionTable        promotionTableInsert = SPYPromotionTable::find(this.RecId);
        if(promotionTableInsert)
        {
            currentDate = promotionTableInsert.StartDate;
            ttsBegin;
            while select promotionWorkerTableInsert
                where promotionWorkerTableInsert.Promotion == promotionTableInsert.RecId
            join promotionWorkerProposedBenefitInsert
                where promotionWorkerProposedBenefitInsert.PromotionWorker == promotionWorkerTableInsert.RecId
            {
                //ttsBegin;
                workerPositionBenefitInsert.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);
                workerPositionBenefitInsert.Benefit = promotionWorkerProposedBenefitInsert.Benefit;
                workerPositionBenefitInsert.AmountMonthly = promotionWorkerProposedBenefitInsert.Monthly;
                workerPositionBenefitInsert.QtyAnnual = promotionWorkerProposedBenefitInsert.QtyAnnual;
                workerPositionBenefitInsert.QtyMonthly = promotionWorkerProposedBenefitInsert.QtyMonthly;
                workerPositionBenefitInsert.AmountAnnual = promotionWorkerProposedBenefitInsert.AmountAnnual;
                workerPositionBenefitInsert.ValidFrom = currentDate;
                workerPositionBenefitInsert.ValidTo = dateMax();
                workerPositionBenefitInsert.LegalEntity = CompanyInfo::current();
                workerPositionBenefitInsert.Worker = promotionWorkerTableInsert.Worker;
                //ttsCommit;
                workerPositionBenefitInsertList.add(workerPositionBenefitInsert);
            }
            workerPositionBenefitInsertList.insertDatabase();

            while select promotionWorkerTableInsert
                where promotionWorkerTableInsert.Promotion == promotionTableInsert.RecId
            join promotionWorkerProposedPayrollInsert
                where promotionWorkerProposedPayrollInsert.PromotionWorker == promotionWorkerTableInsert.RecId
            {
                //ttsBegin;
                workerPositionPayrollInsert.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);
                workerPositionPayrollInsert.Payroll     = promotionWorkerProposedPayrollInsert.Payroll;
                workerPositionPayrollInsert.Monthly     = promotionWorkerProposedPayrollInsert.Monthly;
                workerPositionPayrollInsert.ValidFrom   = currentDate;
                workerPositionPayrollInsert.ValidTo     = datemax();
                workerPositionPayrollInsert.Worker      = promotionWorkerTableInsert.Worker;
                workerPositionPayrollInsert.LegalEntity = CompanyInfo::current();
                //workerPositionPayrollInsert.insert();
                //ttsCommit;
                workerPositionPayrollInsertList.add(workerPositionPayrollInsert);
            }
            workerPositionPayrollInsertList.insertDatabase();
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    //</NE by Rakesh Oct 5 2018>

    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if(this.WorkflowStatus != SPYWorkflowStatus::Created)
        ret = checkFailed("@SPY1095");

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>SPYOvertimeJournalTable</c> table.
    /// </summary>
    /// /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///     A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///     An enumeration value that indicates the concurrency setting to use on the table; optional.
    /// </param>
    /// <returns>
    ///     A record in the <c>SPYOvertimeJournalTable</c> table; otherwise, an empty record.
    /// </returns>
    /// <remarks>
    ///     Finds the specified record in the <c>SPYOvertimeJournalTable</c> table.
    /// </remarks>
    public static SPYPromotionTable find(
    SPYPromotionTableRecId              _recId,
    boolean                              _forUpdate = false,
    ConcurrencyModel                     _concurrencyModel = ConcurrencyModel::Auto)
    {
        SPYPromotionTable               promotionTable;

        promotionTable.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            promotionTable.concurrencyModel(_concurrencyModel);
        }

        select firstonly promotionTable
         where promotionTable.RecId == _recId;

        return promotionTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>SPYPromotionTable</c> table.
    /// </summary>
    /// /// <param name="_code">
    ///    The process ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///     A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///     An enumeration value that indicates the concurrency setting to use on the table; optional.
    /// </param>
    /// <returns>
    ///     A record in the <c>SPYPromotionTable</c> table; otherwise, an empty record.
    /// </returns>
    /// <remarks>
    ///     Finds the specified record in the <c>SPYPromotionTable</c> table.
    /// </remarks>
    public static SPYPromotionTable findByCode(
    SPYPromotionCode                     _code,
    boolean                              _forUpdate = false,
    ConcurrencyModel                     _concurrencyModel = ConcurrencyModel::Auto)
    {
        SPYPromotionTable   promotionTable;

        promotionTable.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            promotionTable.concurrencyModel(_concurrencyModel);
        }

        select firstonly promotionTable
         where promotionTable.PromotionCode == _code;

        return promotionTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkerQuery</Name>
				<Source><![CDATA[
    public static Query getWorkerQuery()
    {
        Query query;
        QueryBuildDataSource    qB;
        QueryBuildDataSource    qb2;

        query = new Query();
        qB = query.addDataSource(tableNum(HcmWorker));
        qb2 = qB.addDataSource(tableNum(HcmEmployment));
        qb2.relations(true);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkflowStatus</Name>
				<Source><![CDATA[
    static void updateWorkflowStatus(SPYPromotionTableRecId _promotionTableRecId,SPYWorkflowStatus _status)
    {
        SPYPromotionTable   promotionTableUpdate;

        ttsBegin;
        promotionTableUpdate = SPYPromotionTable::find(_promotionTableRecId,true);
        if(promotionTableUpdate)
        {
            promotionTableUpdate.WorkflowStatus = _status;
            promotionTableUpdate.update();
        }
        ttsCommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>SPYPayroll</ConfigurationKey>
	<DeveloperDocumentation>@SPY1893</DeveloperDocumentation>
	<FormRef>SPYPromotionTable</FormRef>
	<Label>@SPY1893</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>PromotionCode</TitleField1>
	<TitleField2>Description</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ReplacementKey>PromotionCode_AK</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PromotionCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Details</Name>
			<Label>@SYS318405</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PromotionCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PromotionIncrementType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsPayElementsUpdated</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Log</Name>
			<Label>@SYS2515</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CreatedBy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreatedDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WorkflowStatus</Name>
			<Label>@SPY138</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkflowStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Posted</Name>
			<Label>@SYS1711</Label>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>StartDate</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>StartDate</ExtendedDataType>
			<HelpText>@SPY1897</HelpText>
			<Label>@SPY1896</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<ExtendedDataType>Description</ExtendedDataType>
			<Label>@SPYLabel:Description</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PromotionCode</Name>
			<ExtendedDataType>SPYPromotionCode</ExtendedDataType>
			<Label>@SPYLabel:PromotionCode</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PromotionIncrementType</Name>
			<Label>@SPYLabel:PromotionIncrementType</Label>
			<EnumType>SPYPromotionIncrementType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WorkflowStatus</Name>
			<AllowEdit>No</AllowEdit>
			<Label>@SPYLabel:WorkflowStatus</Label>
			<EnumType>SPYWorkflowStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsPayElementsUpdated</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SPYLabel:PayElementsUpdated</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PromotionCode_AK</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PromotionCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>