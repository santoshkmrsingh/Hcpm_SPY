<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SPYBenefitLedgerBenefitAccrualMapping</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SPYBenefitLedgerBenefitAccrualMapping extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateBenefitAccrual</Name>
				<Source><![CDATA[
    public static void updateBenefitAccrual(SPYBenefitLedger   _benefitLedger,SPYAmount _amount)
    {
        SPYBenefitAccrualDistribution           benefitAccrualDistribution;
        SPYBenefitLedgerBenefitAccrualMapping   benefitLedgerBenefitAccrualMapping;
        SPYAmount                               appliedQty,availedQty;
        SPYAmount                               appliedAmt,availedAmt,remainingAmt;;
    
        _amount = abs(_amount);
        ttsBegin;
        if(_amount)
        {
            appliedAmt = _amount;
            delete_from benefitLedgerBenefitAccrualMapping
                where benefitLedgerBenefitAccrualMapping.BenefitLedger == _benefitLedger.RecId;
            while select forUpdate benefitAccrualDistribution order by TransDate asc
                where benefitAccrualDistribution.Worker == _benefitLedger.Worker &&
                        benefitAccrualDistribution.Benefit == _benefitLedger.Benefit &&
                        benefitAccrualDistribution.RemainingAccCurAmount > 0
            {
                if(appliedAmt > 0)
                {
                    if(appliedAmt <= benefitAccrualDistribution.RemainingAccCurAmount)
                    {
                        availedAmt = appliedAmt;
                        remainingAmt = benefitAccrualDistribution.RemainingAccCurAmount;
                        benefitAccrualDistribution.RemainingAccCurAmount = benefitAccrualDistribution.RemainingAccCurAmount - appliedAmt;
                        benefitAccrualDistribution.RemainingQty          = benefitAccrualDistribution.RemainingQty * benefitAccrualDistribution.RemainingAccCurAmount /
                                                                           remainingAmt;
                        benefitAccrualDistribution.update();
                        appliedAmt = 0;
                    }
                    else
                    {
                        availedAmt = benefitAccrualDistribution.RemainingAccCurAmount;
                        appliedAmt = appliedAmt - benefitAccrualDistribution.RemainingAccCurAmount;
                        benefitAccrualDistribution.RemainingAccCurAmount = 0;
                        benefitAccrualDistribution.RemainingQty          = 0;
                        benefitAccrualDistribution.update();
                    }
                    benefitLedgerBenefitAccrualMapping.BenefitAccrualDistribution   = benefitAccrualDistribution.RecId;
                    benefitLedgerBenefitAccrualMapping.BenefitLedger                = _benefitLedger.RecId;
                    benefitLedgerBenefitAccrualMapping.AllocationFactor             = availedAmt / _amount;
                    benefitLedgerBenefitAccrualMapping.insert();
                }
                else
                    break;
            }
            if(appliedAmt > 0)
            {
                benefitLedgerBenefitAccrualMapping.BenefitAccrualDistribution   = 0;
                benefitLedgerBenefitAccrualMapping.BenefitLedger                = _benefitLedger.RecId;
                benefitLedgerBenefitAccrualMapping.AllocationFactor             = appliedAmt / _amount;
                benefitLedgerBenefitAccrualMapping.insert();
            }
        }
        else if(_benefitLedger.Quantity > 0)
        {
            appliedQty = _benefitLedger.Quantity;
            delete_from benefitLedgerBenefitAccrualMapping
                where benefitLedgerBenefitAccrualMapping.BenefitLedger == _benefitLedger.RecId;
            while select forUpdate benefitAccrualDistribution order by TransDate asc
                where benefitAccrualDistribution.Worker == _benefitLedger.Worker &&
                        benefitAccrualDistribution.Benefit == _benefitLedger.Benefit &&
                        benefitAccrualDistribution.RemainingQty > 0
            {
                if(appliedQty > 0)
                {
                    if(appliedQty <= benefitAccrualDistribution.RemainingQty)
                    {
                        availedQty = appliedQty;
                        benefitAccrualDistribution.RemainingQty = benefitAccrualDistribution.RemainingQty - appliedQty;
                        benefitAccrualDistribution.update();
                        appliedQty = 0;
                    }
                    else
                    {
                        availedQty = benefitAccrualDistribution.RemainingQty;
                        appliedQty = appliedQty - benefitAccrualDistribution.RemainingQty;
                        benefitAccrualDistribution.RemainingQty = 0;
                        benefitAccrualDistribution.update();
                    }
                    benefitLedgerBenefitAccrualMapping.BenefitAccrualDistribution   = benefitAccrualDistribution.RecId;
                    benefitLedgerBenefitAccrualMapping.BenefitLedger                = _benefitLedger.RecId;
                    benefitLedgerBenefitAccrualMapping.AllocationFactor             = availedQty / _benefitLedger.Quantity;
                    benefitLedgerBenefitAccrualMapping.insert();
                }
                else
                    break;
            }
            if(appliedQty > 0)
            {
                benefitLedgerBenefitAccrualMapping.BenefitAccrualDistribution   = 0;
                benefitLedgerBenefitAccrualMapping.BenefitLedger                = _benefitLedger.RecId;
                benefitLedgerBenefitAccrualMapping.AllocationFactor             = appliedQty / _benefitLedger.Quantity;
                benefitLedgerBenefitAccrualMapping.insert();
            }
        }
        ttsCommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>SPYPayroll</ConfigurationKey>
	<DeveloperDocumentation>@SPY1090</DeveloperDocumentation>
	<Label>@SPY1089</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>BenefitLedger</TitleField1>
	<TitleField2>BenefitAccrualDistribution</TitleField2>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AllocationFactor</Name>
			<ExtendedDataType>SPYAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BenefitAccrualDistribution</Name>
			<ExtendedDataType>SPYBenefitAccrualDistributionRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BenefitLedger</Name>
			<ExtendedDataType>SPYBenefitLedgerRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SPYBenefitAccrualDistribution</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>SPYBenefitAccrualDistribution</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BenefitAccrualDistribution</Name>
					<Field>BenefitAccrualDistribution</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SPYBenefitLedger</Name>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>SPYBenefitLedger</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BenefitLedger</Name>
					<Field>BenefitLedger</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId_Indx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>