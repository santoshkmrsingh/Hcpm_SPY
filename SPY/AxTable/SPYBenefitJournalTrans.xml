<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SPYBenefitJournalTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SPYBenefitJournalTrans extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>benefitJournalTable</Name>
				<Source><![CDATA[
    SPYBenefitJournalTable benefitJournalTable()
    {
        return SPYBenefitJournalTable::find(this.BenefitJournal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
    
        this.TransDate      = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        this.Currency       = Ledger::accountingCurrency();
        this.ExchRate       = 100;
        this.DistributeCost = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        HcmEmployment       employment;
        HcmEmploymentDetail employmentDetail;
    
        super(_fieldId);
    
        switch(_fieldId)
        {
            case fieldNum(SPYBenefitJournalTrans,worker) :
                employment = HcmEmployment::findByWorkerLegalEntity(this.Worker,CompanyInfo::current());
                employmentDetail = HcmEmploymentDetail::findByEmployment(employment.RecId);
                this.Currency = employmentDetail.SPYDefaultPayrollCurrency;
    
            case fieldNum(SPYBenefitJournalTrans,Currency) :
                this.setTransCurAmount();
                break;
    
            case fieldNum(SPYBenefitJournalTrans,TransDate) :
                this.setTransCurAmount();
                break;
    
            case fieldNum(SPYBenefitJournalTrans,TransactionCurrencyAmount) :
                this.setTransCurAmount();
                break;
    
            case fieldNum(SPYBenefitJournalTrans,TransactionCurPnLAmount) :
                this.setTransCurAmount();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLineNum</Name>
				<Source><![CDATA[
    LineNum nextLineNum(SPYBenefitJournalRecId _benefitJournal)
    {
        SPYBenefitJournalTrans      benefitJournalTrans;
        LineNum                     ret;
    
        select maxOf(LineNum) from benefitJournalTrans
            where benefitJournalTrans.BenefitJournal == _benefitJournal;
    
        ret = benefitJournalTrans.LineNum + 1;
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshQtynAmt</Name>
				<Source><![CDATA[
    private void refreshQtynAmt()
    {
        SPYBenefitTable     benefitTable = SPYBenefitTable::find(this.Benefit);
        ExchangeRateHelper  exchangeRateHelper;
        SPYAmount           ledgerAmount;
    
        exchangeRateHelper = ExchangeRateHelper::newCurrency(Ledger::current(),this.Currency);
        exchangeRateHelper.parmExchangeDate(this.TransDate);
    
        if(Box::yesNo("@SPY484",DialogButton::Ok) == DialogButton::Yes)
        {
            this.Quantity                   = benefitTable.balanceQty(this.Worker, this.TransDate) * -1;
            this.AccountingCurrencyAmount   = benefitTable.balanceAccountingCurAmount(this.Worker, this.TransDate) * -1;
            this.ExchRate                   = exchangeRateHelper.getExchangeRate1();
            this.TransactionCurrencyAmount  = this.AccountingCurrencyAmount * 100 / this.ExchRate;
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>apportionQtynAmt</Name>
				<Source><![CDATA[
    private void apportionQtynAmt()
    {
        SPYBenefitTable     benefitTable = SPYBenefitTable::find(this.Benefit);
        ExchangeRateHelper  exchangeRateHelper;
        SPYAmount           ledgerAmount;
    
        exchangeRateHelper = ExchangeRateHelper::newCurrency(Ledger::current(),this.Currency);
        exchangeRateHelper.parmExchangeDate(this.TransDate);
    
        //if(Box::yesNo("@SPY1100",DialogButton::Ok) == DialogButton::Yes)
        {
            if(benefitTable.balanceQty(this.Worker))
            {
                ledgerAmount = benefitTable.balanceAccountingCurAmount(this.Worker, this.TransDate) * this.Quantity
                                / benefitTable.balanceQty(this.Worker);
                this.AccountingCurrencyAmount  = ledgerAmount;
                this.TransactionCurrencyAmount = ledgerAmount * 100 / this.ExchRate;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransCurAmount</Name>
				<Source><![CDATA[
    private void setTransCurAmount()
    {
        ExchangeRateHelper          exchangeRateHelper;
        SPYBenefitTable             benefitTable;
        SPYAmount                   ledgerAmount;
        Qty                         balanceQty;
    
        exchangeRateHelper = ExchangeRateHelper::newCurrency(Ledger::current(),this.Currency);
        exchangeRateHelper.parmExchangeDate(this.TransDate);
        this.ExchRate = exchangeRateHelper.getExchangeRate1();
        benefitTable = SPYBenefitTable::find(this.Benefit);
        if(this.benefitJournalTable().JournalType == SPYBenefitJournalType::Encashment)
        {
            balanceQty = benefitTable.balanceQty(this.Worker);
            if(round(balanceQty,0.01) != 0)
            {
                ledgerAmount = benefitTable.balanceAccountingCurAmount(this.Worker) * this.Quantity
                                / balanceQty;
                this.TransactionCurPnLAmount = ( ledgerAmount )  - (this.TransactionCurrencyAmount );
            }
            else
            {
                warning(strFmt("@SPY1255",HcmWorker::find(this.Worker).name()));
                this.TransactionCurPnLAmount = - this.TransactionCurrencyAmount;
            }
        }
        if(this.ExchRate)
        {
            this.AccountingCurrencyAmount = this.TransactionCurrencyAmount * this.ExchRate / 100;
            this.AccountingCurPnLAmount   = this.TransactionCurPnLAmount * this.ExchRate / 100;
        }
        else
        {
            this.AccountingCurrencyAmount = this.TransactionCurrencyAmount;
            this.AccountingCurPnLAmount   = this.TransactionCurPnLAmount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;
    
        ret = super(_fieldIdToCheck);
        switch(_fieldIdToCheck)
        {
            case fieldNum (SPYBenefitJournalTrans,Quantity) :
                if(this.benefitJournalTable().JournalType == SPYBenefitJournalType::Encashment)
                {
                    if ( this.Quantity >=0 ) 
                    {
                        ret = checkFailed( "@SPY:EncashQtyValidate");
                    }
                    else
                        this.apportionQtynAmt();
                }
                break;

            case fieldNum( SPYBenefitJournalTrans, Benefit) :
                if(this.benefitJournalTable().JournalType == SPYBenefitJournalType::Encashment)
                {
                    this.refreshQtynAmt();
                }
                break;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
    
        ret = super();
    
        // Validation - Encashment Journal Qty & Amt should be always negative
        if(this.benefitJournalTable().JournalType == SPYBenefitJournalType::Encashment)
        {
            if(this.Quantity > 0 || this.TransactionCurrencyAmount > 0)
            {
                ret = checkFailed( strFmt( "@SPY1672", this.LineNum) );
            }
        }
    
        // Validation - Accrual Journal Payout not allowed
        if(this.benefitJournalTable().JournalType == SPYBenefitJournalType::Accrual)
        {
            if(this.Payout)
            {
                ret = checkFailed( strFmt( "@SPY1673", this.LineNum) );
            }
    
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>SPYBenefitJournalTrans</c> table.
    /// </summary>
    /// /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///     A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///     An enumeration value that indicates the concurrency setting to use on the table; optional.
    /// </param>
    /// <returns>
    ///     A record in the <c>SPYBenefitJournalTrans</c> table; otherwise, an empty record.
    /// </returns>
    /// <remarks>
    ///     Finds the specified record in the <c>SPYBenefitJournalTrans</c> table.
    /// </remarks>
    public static SPYBenefitJournalTrans find(
        RefRecId                             _recId,
        boolean                              _forUpdate = false,
        ConcurrencyModel                     _concurrencyModel = ConcurrencyModel::Auto)
    {
        SPYBenefitJournalTrans   benefitJournalTrans;
    
        benefitJournalTrans.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            benefitJournalTrans.concurrencyModel(_concurrencyModel);
        }
    
         select firstonly benefitJournalTrans
             where benefitJournalTrans.RecId == _recId;
    
        return benefitJournalTrans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>SPYPayroll</ConfigurationKey>
	<DeveloperDocumentation>@SPY269</DeveloperDocumentation>
	<Label>@SPY314</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>BenefitJournal</TitleField1>
	<TitleField2>LineNum</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ReplacementKey>BenefitJournal_AK</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BenefitJournal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AccruedDetails</Name>
			<Label>@SPY1104</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccruedQuantity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccruedTransactionCurrencyAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProportionateTransactionCurrencyAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Amount</Name>
			<Label>@SYS53072</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransactionCurrencyAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Currency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionCurPnLAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExchRate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Benefit</Name>
			<Label>@SPY46</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Benefit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Details</Name>
			<Label>@SYS318405</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayrollPeriodlLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS342338</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Encashment</Name>
			<Label>@SPY483</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Payout</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Period</Name>
			<Label>@SPY24</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PayrollPeriodlLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Quantity</Name>
			<Label>@SYS102891</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Quantity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Transaction</Name>
			<Label>@SYS15191</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Txt</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Worker</Name>
			<Label>@SYS80745</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Distribution</Name>
			<Label>@SPY:Distribution</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DistributeCost</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AccountingCurPnLAmount</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>SPYAmount</ExtendedDataType>
			<Label>@SPY486</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AccountingCurrencyAmount</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>SPYAmount</ExtendedDataType>
			<Label>@SPY247</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AccruedQuantity</Name>
			<ExtendedDataType>SPYAmount</ExtendedDataType>
			<Label>@SPY1101</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AccruedTransactionCurrencyAmount</Name>
			<ExtendedDataType>SPYAmount</ExtendedDataType>
			<Label>@SPY1102</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Benefit</Name>
			<ExtendedDataType>SPYPayElementRecId</ExtendedDataType>
			<Label>@SPY46</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BenefitJournal</Name>
			<ExtendedDataType>SPYBenefitJournalRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Currency</Name>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExchRate</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>ExchRate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<ExtendedDataType>SPYLineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Payout</Name>
			<HelpText>@SPY1238</HelpText>
			<Label>@SPY1237</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PayrollPeriodlLine</Name>
			<ExtendedDataType>SPYPayrollPeriodLineRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ProportionateTransactionCurrencyAmount</Name>
			<ExtendedDataType>SPYAmount</ExtendedDataType>
			<Label>@SPY1103</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Quantity</Name>
			<ExtendedDataType>SPYAmount</ExtendedDataType>
			<Label>@SYS3065</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TransactionCurPnLAmount</Name>
			<ExtendedDataType>SPYAmount</ExtendedDataType>
			<Label>@SPY485</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TransactionCurrencyAmount</Name>
			<ExtendedDataType>SPYAmount</ExtendedDataType>
			<Label>@SYS152258</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Txt</Name>
			<ExtendedDataType>SPYTransTxt</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Worker</Name>
			<ExtendedDataType>HcmWorkerRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DistributeCost</Name>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SPY:DistributeCost</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>BenefitJournal_AK</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>BenefitJournal</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Currency</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>Currency</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmWorker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Worker</Name>
					<Field>Worker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SPYBenefitJournalTable</Name>
			<Cardinality>OneMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>SPYBenefitJournalTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BenefitJournal</Name>
					<Field>BenefitJournal</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SPYBenefitTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>SPYBenefitTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Benefit</Name>
					<Field>Benefit</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SPYPayrollPeriodLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>SPYPayrollPeriodLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PayrollPeriodlLine</Name>
					<Field>PayrollPeriodlLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>